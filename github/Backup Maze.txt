#include <iostream>
#include "libs/EdubotLib.hpp"

void viraDireita(EdubotLib* bot, bool* fezCurva,int* numeroCurvas);
void viraEsquerda(EdubotLib* bot, bool* fezCurva,int* numeroCurvas);
void viraAtras(EdubotLib* bot, bool* fezCurva,int* numeroCurvas);

int main(){
	bool fezCurva = false;
	bool estadoCurva = false;
	int numeroCurvas = 0;
   
    EdubotLib *bot = new EdubotLib();
    
    
    if(bot->connect()){ 
	    while(bot->isConnected()){
	    		bot->sleepMilliseconds(200);
	    		float frente = bot->getSonar(3);
    			float direita = bot->getSonar(6);
    			float esquerda = bot->getSonar(0);
	    		if(frente > 0.312){
	    			bot->move(1);
				bot->sleepMilliseconds(700);
	    		}
    			/*bool frenteLivre(EdubotLib* bot) { return bot->getSonar(3) > 0.3; }
			bool direitaLivre(EdubotLib* bot) { return bot->getSonar(6) > 0.3; }
			bool esquerdaLivre(EdubotLib* bot) { return bot->getSonar(0) > 0.3; }*/
    			
    			bot->neutral();
    			bot->sleepMilliseconds(1000);
    			frente = bot->getSonar(3);
    			direita = bot->getSonar(6);
    			esquerda = bot->getSonar(0);
    			std::cout << "Frente:"<< frente << std::endl;
    			std::cout << "Esquerda:"<< esquerda << std::endl;
    			std::cout << "Direita:"<< direita << std::endl;
    			std::cout << "Sentido Rotação:"<< numeroCurvas * 90 << std::endl;
    			//bot->neutral();
    			//bot->sleepMilliseconds(2000);

	    		if(numeroCurvas == 0 && direita > 0.312 && frente < 0.312 && !fezCurva)
	    			viraDireita(bot, &fezCurva, &numeroCurvas);
	    		else if(numeroCurvas == 0 && direita < 0.312 && frente < 0.312 && esquerda > 0.312 && !fezCurva)
	    			viraEsquerda(bot, &fezCurva, &numeroCurvas);
	    		else if(numeroCurvas == 0 && direita < 0.312 && frente < 0.312 && esquerda < 0.312 && !fezCurva)
	    			viraAtras(bot, &fezCurva, &numeroCurvas);
	    		if(numeroCurvas == 1 && esquerda > 0.312 && !fezCurva)
	    			viraEsquerda(bot, &fezCurva, &numeroCurvas);
	    		if(numeroCurvas == -1 && direita > 0.312 && !fezCurva)
	    			viraDireita(bot, &fezCurva, &numeroCurvas);
	    		else if(numeroCurvas == -1 && direita < 0.312 && frente < 0.312 && esquerda > 0.312 && !fezCurva)
	    			viraEsquerda(bot, &fezCurva, &numeroCurvas);
	    		if((numeroCurvas == -2 || numeroCurvas == 2) && frente < 0.312 && direita > 0.312 && !fezCurva)
	    			viraDireita(bot, &fezCurva, &numeroCurvas);
	    		
	    		
	    		
	    		
	    
	    		fezCurva = false;
	    }
    		 bot->disconnect();
    }
    	
    else{
        std::cout << "Could not connect on robot!" << std::endl;
    }
    return 0;
}

void viraDireita(EdubotLib* bot,bool* fezCurva,int* numeroCurvas){
	
	bot->rotate(90);
	bot->sleepMilliseconds(1500);
	*fezCurva = true;
	(*numeroCurvas)++;
	std::cout << *numeroCurvas << std::endl;
}

void viraEsquerda(EdubotLib* bot,bool* fezCurva, int* numeroCurvas){
	
	bot->rotate(-90);
	bot->sleepMilliseconds(1500);
	*fezCurva = true;
	(*numeroCurvas)--;
	std::cout << *numeroCurvas << std::endl;
}

void viraAtras(EdubotLib* bot,bool* fezCurva,int* numeroCurvas){
	
	bot->rotate(180);
	bot->sleepMilliseconds(1800);
	*fezCurva = true;
	(*numeroCurvas)=-2;
	
}